name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Dodaj uprawnienia do dodawania komentarzy do PR
permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npm run test:typecheck

  test:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            coverage/lcov-report/
          retention-days: 30

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always() && needs.lint.result == 'success' && needs.test.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download coverage reports
        uses: actions/download-artifact@v5
        with:
          name: coverage-reports
          path: coverage/

      - name: Generate status comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary if available
            let coverageInfo = '';
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                coverageInfo = `\n\n## 📊 Test Coverage\n` +
                  `- **Statements:** ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n` +
                  `- **Branches:** ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n` +
                  `- **Functions:** ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n` +
                  `- **Lines:** ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})`;
              }
            } catch (error) {
              console.log('Could not read coverage data:', error.message);
            }
            
            // Check if this is a PR
            if (context.eventName === 'pull_request') {
              const commentBody = `## ✅ All Checks Passed!\n\n` +
                `🎉 **Pull Request is ready for review!**\n\n` +
                `### 🔍 Checks Completed:\n` +
                `- ✅ **Linting:** Code style and quality checks passed\n` +
                `- ✅ **Unit Tests:** All tests passed with coverage${coverageInfo}\n\n` +
                `---\n` +
                `*This comment was automatically generated by GitHub Actions*`;
              
              // Find existing comment to update
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const existingComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('All Checks Passed!')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
              }
            } else {
              // For pushes to main branch
              console.log('This is a push to main branch, no PR comment needed');
            }
